name: SonarCloud
on:
  push:
    branches:
      - master
      - develop
      - feature/*
      - hotfix/*
      - release/*
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    timeout-minutes: 5
   
    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install Dotnet Tools
        shell: pwsh
        run: |
          dotnet tool restore
          Write-Host "GitVersion.Tool installed now try the tool"
          $gv = dotnet tool run dotnet-gitversion /config .config/GitVersion.yml | Out-String | ConvertFrom-Json
          Write-Host "GitVersion.Tool output is $gv"

      # - name: Run Elasticsearch
      #   run: |
      #     docker run -d --name elasticsearch -p 9800:9200 -e "discovery.type=single-node" -e "xpack.security.enabled=false" docker.elastic.co/elasticsearch/elasticsearch:8.13.0

      # - name: Wait for Elasticsearch to be ready
      #   shell: pwsh
      #   run: |
      #     $uri = "http://localhost:9800"
      #     $timeoutSeconds = 120
      #     $intervalSeconds = 5

      #     $sw = [Diagnostics.Stopwatch]::StartNew()

      #     while ($sw.elapsed.totalseconds -lt $timeoutSeconds) {
      #         try {
      #             $response = Invoke-WebRequest -Uri $uri -Method Get -ErrorAction Stop
      #             if ($response.StatusCode -eq 200) {
      #                 Write-Host "Successfully connected to $uri"
      #                 Write-Host "Response content: $($response.Content)"
      #                 $sw.Stop()
      #                 return
      #             }
      #         }
      #         catch {
      #             Write-Host "Failed to connect to $uri. Retrying in $intervalSeconds second(s)..."
      #             Start-Sleep -Seconds $intervalSeconds
      #         }
      #     }

      #     $sw.Stop()
      #     throw "Could not connect to $uri within $timeoutSeconds second(s)."
        
      - name: Setup dotnet 3
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      - name: Setup dotnet 9
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 9.x

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"alkampfergit_alkampfer.assistant" /o:"alkampfergit-github" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          ./build.ps1 -configuration "debug"
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"